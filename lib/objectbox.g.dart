// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'objectbox/event.dart';
import 'objectbox/task.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1684076486688986286),
      name: 'Event',
      lastPropertyId: const obx_int.IdUid(8, 5348839037868653200),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6569588434991491588),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2525353311477676432),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 2914322078025281334),
            name: 'startTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6772316371141577677),
            name: 'endTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4954284804133112985),
            name: 'colorValue',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1129258756316173917),
            name: 'isAllDay',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5348839037868653200),
            name: 'isFixed',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 2982125569205477989),
      name: 'Task',
      lastPropertyId: const obx_int.IdUid(7, 5381287377534538503),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8795211630569044699),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3711830461752744057),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3135578685837419639),
            name: 'estimatedTime',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6816436710465819576),
            name: 'dueDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7236060397516012799),
            name: 'startDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8067665372735761391),
            name: 'priority',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5381287377534538503),
            name: 'flexible',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 2982125569205477989),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [3039803589815677289],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        3926476058949071154,
        3911917288605708940,
        8779504783794744168,
        6549202447965614986,
        6812928977167934969
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Event: obx_int.EntityDefinition<Event>(
        model: _entities[0],
        toOneRelations: (Event object) => [],
        toManyRelations: (Event object) => {},
        getId: (Event object) => object.id,
        setId: (Event object, int id) {
          object.id = id;
        },
        objectToFB: (Event object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addInt64(2, object.startTime.millisecondsSinceEpoch);
          fbb.addInt64(3, object.endTime.millisecondsSinceEpoch);
          fbb.addInt64(4, object.colorValue);
          fbb.addBool(5, object.isAllDay);
          fbb.addBool(7, object.isFixed);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final startTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final endTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final colorValueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final isAllDayParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final isFixedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final object = Event(
              id: idParam,
              title: titleParam,
              startTime: startTimeParam,
              endTime: endTimeParam,
              colorValue: colorValueParam,
              isAllDay: isAllDayParam,
              isFixed: isFixedParam);

          return object;
        }),
    Task: obx_int.EntityDefinition<Task>(
        model: _entities[1],
        toOneRelations: (Task object) => [],
        toManyRelations: (Task object) => {},
        getId: (Task object) => object.id,
        setId: (Task object, int id) {
          object.id = id;
        },
        objectToFB: (Task object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(2, object.estimatedTime);
          fbb.addInt64(3, object.dueDate.millisecondsSinceEpoch);
          fbb.addInt64(4, object.startDate.millisecondsSinceEpoch);
          fbb.addInt64(5, object.priority);
          fbb.addBool(6, object.flexible);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final estimatedTimeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final dueDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final startDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final priorityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final flexibleParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final object = Task(
              id: idParam,
              name: nameParam,
              estimatedTime: estimatedTimeParam,
              dueDate: dueDateParam,
              startDate: startDateParam,
              priority: priorityParam,
              flexible: flexibleParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Event] entity fields to define ObjectBox queries.
class Event_ {
  /// See [Event.id].
  static final id = obx.QueryIntegerProperty<Event>(_entities[0].properties[0]);

  /// See [Event.title].
  static final title =
      obx.QueryStringProperty<Event>(_entities[0].properties[1]);

  /// See [Event.startTime].
  static final startTime =
      obx.QueryDateProperty<Event>(_entities[0].properties[2]);

  /// See [Event.endTime].
  static final endTime =
      obx.QueryDateProperty<Event>(_entities[0].properties[3]);

  /// See [Event.colorValue].
  static final colorValue =
      obx.QueryIntegerProperty<Event>(_entities[0].properties[4]);

  /// See [Event.isAllDay].
  static final isAllDay =
      obx.QueryBooleanProperty<Event>(_entities[0].properties[5]);

  /// See [Event.isFixed].
  static final isFixed =
      obx.QueryBooleanProperty<Event>(_entities[0].properties[6]);
}

/// [Task] entity fields to define ObjectBox queries.
class Task_ {
  /// See [Task.id].
  static final id = obx.QueryIntegerProperty<Task>(_entities[1].properties[0]);

  /// See [Task.name].
  static final name = obx.QueryStringProperty<Task>(_entities[1].properties[1]);

  /// See [Task.estimatedTime].
  static final estimatedTime =
      obx.QueryDoubleProperty<Task>(_entities[1].properties[2]);

  /// See [Task.dueDate].
  static final dueDate =
      obx.QueryDateProperty<Task>(_entities[1].properties[3]);

  /// See [Task.startDate].
  static final startDate =
      obx.QueryDateProperty<Task>(_entities[1].properties[4]);

  /// See [Task.priority].
  static final priority =
      obx.QueryIntegerProperty<Task>(_entities[1].properties[5]);

  /// See [Task.flexible].
  static final flexible =
      obx.QueryBooleanProperty<Task>(_entities[1].properties[6]);
}
